package nyuad.ccs.moma.vulnerability.tester.rest.api;

import lombok.RequiredArgsConstructor;
import nyuad.ccs.moma.vulnerability.tester.model.User;
import nyuad.ccs.moma.vulnerability.tester.service.UserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import javax.websocket.server.PathParam;
import java.util.List;

@RestController
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    @PostMapping("/user")
    public ResponseEntity<User> createUser(@Valid @RequestBody final User user) {
        return new ResponseEntity<>(userService.saveUser(user), HttpStatus.CREATED);
    }

    @GetMapping("/user/{id}")
    public ResponseEntity<User> getUser(@PathVariable("id") final Long id) {
        return new ResponseEntity<>(userService.getUser(id), HttpStatus.OK);
    }

    @GetMapping("/user")
    public ResponseEntity<List<User>> getUsersByBalanceGreaterThan(@PathParam("balance") final float balance) {
        return new ResponseEntity<>(userService.getUsersByBalanceGreaterThan(balance), HttpStatus.OK);
    }

    @PutMapping("/user")
    public ResponseEntity<String> updateUser(@RequestParam("query") final String query) {
        userService.updateUser(query);
        return new ResponseEntity<>("Sql Injection", HttpStatus.OK);
    }

}
